type Query {
    allLinks: [Link]
    allUsers: [User]
    viewer: User
}


type Mutation {
  createLink(url: String!, description: String!): Link 
  createUser(authProvider: AuthData!, isDoctor: Boolean!, gender: String!, age: Int!): User
  signinUser(auth: AuthData): SigninPayload
  createVote(linkId: ID, userId: ID): Vote
  deleteUser(auth: AuthData!): Boolean
}

type Vote {
    id: ID!
    createdAt: DateTime!
    user: User!
    link: Link!
}

scalar DateTime

input AuthData {
	username: String!
	password: String!
}


type Link {
	id: ID!
  	url: String!
  	description: String!
  	postedBy: User
}

# A user can be a doctor, but does not have to be
type User {
	id: ID!
	username: String
	isDoctor: Boolean
	gender: String
	age: Int
}

type SigninPayload {
  token: String
  user: User
}

schema {
  query: Query
  mutation: Mutation
}

