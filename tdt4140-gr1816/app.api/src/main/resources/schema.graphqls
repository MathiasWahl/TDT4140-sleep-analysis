type Query {
	# Returns all the users
    allUsers: [User]
    
    # Returns the currently logged in user
    viewer: User

    # DataAccess requested by you
    myDataAccessRequests: [DataAccessRequest]

    # DataAccess requested by others, for you
    dataAccessRequestsForMe: [DataAccessRequest]
    
    # Messages sent to you
    messagesForMe: [Message]
    
    # Returns all user sleep/steps data
    allSleepData(userId: String!): [SleepData]
    allStepsData(userId: String!): [StepsData]
    allPulseData(userId: String!): [PulseData]
    
    # Returns all viewer sleep/steps data
    sleepDataByViewer: [SleepData]
    stepsDataByViewer: [StepsData]
    pulseDataByViewer: [PulseData]
}


type Mutation {
  createUser(authProvider: AuthData!, isDoctor: Boolean!, gender: String!, age: Int!): User
  signinUser(auth: AuthData): SigninPayload
  deleteUser(auth: AuthData!): Boolean
  forgotPassword(username: String!): Boolean
 
 # date is of the form 'YYYY-MM-DD'
  createSleepData(date: String!, duration: Int!, efficiency: Int!): SleepData
  createStepsData(date: String!, steps: Int!): StepsData
  createPulseData(date: String!, restHr: Int!): PulseData
  
  deleteSleepData(sleepId: ID!): Boolean
  deleteStepsData(stepsId: ID!): Boolean
  deletePulseData(pulseId: ID!): Boolean
  
  requestDataAccess(dataOwnerId: ID!): DataAccessRequest
  answerDataAccessRequest(dataAccessRequestId: ID!, status: DataAccessRequestStatus!): DataAccessRequest

  setIsGatheringData(isGatheringData: Boolean!): Boolean
  
  createMessage(toId: ID!, subject: String!, message: String!): Message
}

input AuthData {
	username: String!
	password: String!
}

enum DataAccessRequestStatus {
        PENDING,
        ACCEPTED,
        REJECTED
}

type DataAccessRequest {
        id: ID!
        dataOwner: User!
        requestedBy: User!
        status: DataAccessRequestStatus!
}

type Message {
	id: ID!
	from: User!
	to: User!
	subject: String!
	message: String!
}

# A user can be a doctor, but does not have to be
type User {
	id: ID!
	username: String
	isDoctor: Boolean
	gender: String
	age: Int
	isGatheringData: Boolean
}

type SleepData {
	id: ID!
	user: User
	# date is of the form 'YYYY-MM-DD'
	date: String
	duration: Int
	efficiency: Int
}

type StepsData {
	id: ID!
	user: User
	# date is of the form 'YYYY-MM-DD'
	date: String
	steps: Int
}

type PulseData {
	id: ID!
	user: User!
	date: String!
	restHr: Int!
}

type SigninPayload {
  token: String
  user: User
}

schema {
  query: Query
  mutation: Mutation
}

